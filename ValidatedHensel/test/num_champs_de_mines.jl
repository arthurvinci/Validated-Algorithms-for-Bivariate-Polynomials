using AbstractAlgebra
using Nemo
using ValidatedHensel


l = 10
QX, x = power_series_ring(AbstractAlgebra.QQ, l, "x"; model=:capped_absolute)
QXY, y = polynomial_ring(QX,"y")
RX, _ = power_series_ring(RDF, 50, "x"; model=:capped_absolute)
RXY, _ = polynomial_ring(RX,"y")
rho, tau = 0.05, 0.5

A = (1//2 + 3//5*x^48 + 2*x^49 + O(x^50))*y^41 + (7//2 + 1//7*x^8 + 4//9*x^9 + 5//3*x^11 + 2//5*x^12 + 1//10*x^13 + 2//3*x^14 + 7//3*x^15 + 1//5*x^16 + 7//5*x^17 + 3//8*x^18 + 5//2*x^19 + x^20 + 7*x^21 + 4*x^22 + 5//8*x^23 + 4//5*x^24 + 7//2*x^25 + 3//2*x^26 + 3//4*x^27 + 4//7*x^28 + 1//10*x^29 + 4*x^30 + 3*x^31 + 6*x^32 + 2//7*x^33 + 9//5*x^34 + 1//5*x^35 + 6//5*x^36 + x^37 + 7//8*x^38 + 2*x^39 + 7//6*x^40 + 7*x^42 + 3*x^43 + 8//5*x^44 + 2*x^45 + x^46 + 3*x^47 + 3//10*x^48 + 1//2*x^49 + O(x^50))*y^40 + (2 + 2//3*x^45 + 7//6*x^46 + 1//5*x^47 + 3//10*x^49 + O(x^50))*y^39 + (7//5 + 4//3*x + 2//3*x^2 + 1//2*x^3 + x^6 + 7//9*x^7 + 2*x^8 + 7//5*x^9 + 1//7*x^10 + 5//2*x^11 + x^12 + 1//2*x^13 + 1//4*x^14 + 2*x^15 + 2*x^16 + 1//2*x^17 + 1//2*x^18 + 3*x^21 + 2*x^22 + 9//8*x^23 + 1//6*x^25 + 4//9*x^27 + 3*x^28 + 1//3*x^29 + 7//3*x^30 + 7//9*x^32 + 2*x^33 + 9//4*x^34 + 2//3*x^35 + x^36 + 1//4*x^37 + 6*x^38 + 1//9*x^40 + 7*x^41 + 2*x^42 + 9//7*x^43 + x^44 + 4//5*x^45 + x^46 + 1//10*x^47 + 1//6*x^48 + 9//4*x^49 + O(x^50))*y^38 + (1//2 + 6//7*x^33 + 1//3*x^34 + 9*x^35 + 2//7*x^36 + 1//2*x^37 + 7//10*x^38 + 5//6*x^40 + 3//5*x^41 + 10*x^42 + 9//4*x^43 + 1//6*x^44 + 7//4*x^45 + 10//3*x^46 + 2//3*x^47 + 1//3*x^48 + 2//5*x^49 + O(x^50))*y^37 + (1 + 8//9*x^35 + 1//2*x^36 + x^37 + x^38 + 3//7*x^39 + 5//3*x^40 + 5//6*x^41 + 1//10*x^43 + x^44 + 10*x^45 + 4//5*x^46 + 10//9*x^47 + 3//2*x^48 + O(x^50))*y^36 + (1 + 9//5*x^32 + 6//5*x^33 + 10//3*x^34 + 2*x^35 + 3//4*x^36 + x^37 + 7//2*x^38 + 3//7*x^39 + 2*x^40 + 1//5*x^41 + 6*x^42 + 5//4*x^43 + 5//9*x^45 + 6*x^46 + 8*x^47 + 1//3*x^48 + 10//3*x^49 + O(x^50))*y^34 + (2 + 5//2*x^24 + 3*x^25 + 8*x^26 + 5*x^27 + 8//9*x^28 + 4//3*x^29 + 2*x^30 + 5//2*x^31 + 6//5*x^32 + 5//6*x^33 + 1//3*x^34 + 4//3*x^35 + 6//7*x^36 + 2//5*x^37 + 10//7*x^39 + 3//4*x^40 + 2//7*x^41 + 6//7*x^42 + x^43 + 1//4*x^44 + 4//9*x^45 + 1//2*x^46 + 3//4*x^47 + 2*x^48 + 2*x^49 + O(x^50))*y^33 + (4//5 + 1//9*x^49 + O(x^50))*y^32 + (9//2 + 8//5*x^25 + 7//2*x^26 + 7//8*x^27 + 7//2*x^28 + 7//9*x^29 + 2//5*x^30 + 4//3*x^31 + 2//5*x^32 + 4//5*x^33 + 5//9*x^34 + x^35 + 5//3*x^36 + 1//2*x^37 + 3*x^38 + 3//7*x^39 + 5//3*x^40 + 2//3*x^41 + 10*x^42 + 5//9*x^43 + 8*x^44 + 4//7*x^45 + 5//4*x^46 + 6*x^47 + 2//9*x^48 + x^49 + O(x^50))*y^31 + (2 + 7//6*x^6 + 1//5*x^7 + 7//3*x^8 + 7//10*x^9 + 7//2*x^10 + 1//4*x^12 + 5//8*x^13 + 9*x^14 + 8//5*x^15 + 1//6*x^16 + 3//7*x^17 + 3//7*x^18 + 2*x^19 + 5*x^20 + 5//7*x^21 + 9//8*x^22 + 5*x^23 + 1//3*x^24 + 1//5*x^26 + 7//3*x^27 + 10//9*x^28 + 7//10*x^29 + 5*x^30 + x^33 + 9*x^35 + 1//8*x^36 + 7//8*x^37 + 5*x^38 + x^41 + 5//4*x^42 + 2//3*x^43 + x^44 + 5//4*x^45 + x^46 + 1//9*x^47 + x^48 + 5//7*x^49 + O(x^50))*y^30 + (4//5 + 8//3*x^7 + x^8 + 3//2*x^10 + 2//5*x^11 + 8//9*x^12 + 3//2*x^13 + 7//8*x^14 + 2*x^15 + 9//4*x^16 + 5*x^17 + 4//5*x^19 + 7//9*x^20 + 10//9*x^22 + 10//7*x^24 + 1//2*x^25 + 1//3*x^27 + 9//4*x^28 + 8//9*x^29 + 5*x^30 + 9//8*x^31 + 5//3*x^32 + 1//5*x^33 + 9//2*x^34 + 1//5*x^35 + 7//6*x^37 + 1//3*x^38 + 2*x^39 + 4//5*x^40 + 5//7*x^43 + 1//2*x^44 + 1//6*x^45 + 8*x^46 + 10//7*x^47 + 2*x^48 + 5//3*x^49 + O(x^50))*y^29 + (2//7 + 1//3*x^24 + x^25 + 1//7*x^26 + 1//6*x^27 + 2//3*x^28 + 5//4*x^29 + 4//3*x^30 + 5//2*x^31 + x^32 + 9//8*x^33 + 1//5*x^34 + 3//2*x^35 + 2//7*x^36 + 5//6*x^37 + 1//8*x^38 + 1//4*x^39 + x^40 + x^41 + x^42 + 8//3*x^43 + 5//4*x^44 + 9//7*x^45 + 1//5*x^46 + 2//5*x^47 + 2//3*x^48 + 1//10*x^49 + O(x^50))*y^28 + (7//9 + 3//5*x^48 + 3//2*x^49 + O(x^50))*y^27 + (1//4 + 5*x^10 + 1//10*x^11 + 4//9*x^12 + 5//2*x^14 + 9//7*x^15 + 5//7*x^16 + 5//4*x^17 + 2*x^18 + 3//5*x^19 + 7//3*x^20 + 1//9*x^21 + 5//6*x^22 + x^23 + 2//3*x^24 + 1//6*x^25 + 4//9*x^26 + x^27 + 7//5*x^28 + 4//5*x^29 + 10//7*x^30 + 10*x^32 + 3*x^33 + 9//4*x^34 + 9*x^35 + 6//7*x^36 + 2*x^37 + 5//3*x^38 + 4//5*x^39 + 2//3*x^40 + 1//4*x^41 + 2*x^42 + 6//7*x^43 + 3*x^45 + 1//9*x^46 + 1//2*x^47 + x^48 + 5*x^49 + O(x^50))*y^26 + (5//3 + x^46 + 2*x^47 + 10//3*x^48 + 4//7*x^49 + O(x^50))*y^25 + (2//5 + 5//6*x^24 + 1//3*x^25 + 5//4*x^26 + 2*x^27 + 3//2*x^28 + 5//9*x^31 + 5//7*x^32 + 1//2*x^33 + 3*x^34 + 4*x^35 + 5//8*x^36 + 2*x^37 + 1//4*x^38 + 3*x^39 + 8//3*x^40 + 5//8*x^41 + 1//10*x^42 + 2*x^43 + 9*x^44 + 1//2*x^45 + 1//3*x^46 + 1//2*x^47 + 7//10*x^48 + 1//2*x^49 + O(x^50))*y^24 + (2//3 + 1//8*x^6 + 2//3*x^7 + 5//2*x^8 + 6//5*x^9 + 2//9*x^10 + 1//2*x^11 + 9//7*x^13 + 1//9*x^14 + 3//4*x^15 + 5//7*x^16 + x^17 + 2*x^18 + x^20 + 2*x^21 + 3//7*x^22 + 5*x^23 + 8*x^24 + 3//2*x^25 + x^26 + 3*x^27 + x^28 + x^29 + 1//2*x^30 + 2//3*x^31 + 4//5*x^32 + 2//5*x^33 + 2//5*x^34 + 7//8*x^35 + 5//4*x^36 + 1//2*x^37 + 1//6*x^38 + 8//3*x^39 + 3//5*x^40 + x^41 + 3//5*x^42 + 3//5*x^43 + 8//5*x^44 + x^45 + 1//2*x^46 + 9//4*x^47 + 2//3*x^48 + 5//4*x^49 + O(x^50))*y^23 + (1//2 + 3//5*x^46 + 1//3*x^47 + 10//9*x^48 + 2*x^49 + O(x^50))*y^22 + (1//2 + 1//7*x^16 + 2//3*x^17 + 7//2*x^18 + 7//9*x^19 + 1//6*x^21 + 5//6*x^22 + 10//7*x^23 + x^24 + 1//7*x^25 + x^27 + 1//5*x^28 + 8//7*x^29 + 7//3*x^30 + 1//10*x^31 + 2//3*x^32 + 1//2*x^33 + 5//7*x^34 + 7//4*x^35 + 2*x^36 + 3//5*x^37 + 2*x^38 + 3//10*x^39 + 4//3*x^40 + 3*x^41 + 5//3*x^44 + 5//3*x^45 + 3//4*x^46 + 1//2*x^47 + 8*x^49 + O(x^50))*y^21 + (5//2 + 3*x^39 + 1//9*x^40 + 7//2*x^41 + 3//4*x^42 + 3//2*x^43 + 5*x^44 + 2//5*x^45 + 1//3*x^46 + 5//7*x^47 + 5//2*x^48 + 2//3*x^49 + O(x^50))*y^20 + (3//10 + 5//9*x^45 + 5//6*x^46 + 1//3*x^47 + 9//4*x^49 + O(x^50))*y^19 + (10//3 + 2//7*x^20 + 3//7*x^21 + 4*x^22 + 2//3*x^23 + x^24 + 5//2*x^27 + 10//7*x^29 + 2*x^30 + 3//4*x^31 + 4//5*x^32 + 7//3*x^33 + 7//6*x^34 + 7//9*x^35 + 10//9*x^36 + 9//8*x^37 + 7//3*x^38 + 5//4*x^39 + 5//9*x^40 + x^41 + 8//3*x^42 + 2*x^43 + 9//10*x^45 + 7*x^46 + 1//3*x^47 + x^48 + 7//3*x^49 + O(x^50))*y^17 + (8//9 + x^7 + x^8 + x^9 + 1//2*x^10 + 4//7*x^11 + 3//8*x^12 + 1//6*x^13 + 5//7*x^14 + 7//10*x^15 + 10//3*x^16 + x^17 + 2//3*x^18 + 2//3*x^19 + 1//2*x^20 + 1//4*x^21 + 7//10*x^22 + 10//3*x^23 + 3*x^24 + 2//5*x^25 + 2*x^28 + 2*x^29 + x^30 + 3//2*x^31 + 5*x^33 + 9//7*x^34 + 1//4*x^35 + 1//3*x^36 + 3//4*x^37 + 1//5*x^39 + 1//2*x^40 + 2//3*x^41 + 5//3*x^42 + 4//3*x^43 + 9//4*x^44 + 2//9*x^45 + 3//2*x^47 + 10//3*x^48 + 1//3*x^49 + O(x^50))*y^16 + (10 + 1//2*x^6 + 1//9*x^7 + 4*x^8 + 1//4*x^9 + 5//8*x^10 + x^11 + x^12 + 7//3*x^13 + 5//9*x^14 + 3*x^15 + 5//9*x^16 + 6*x^17 + 5//2*x^18 + 9//8*x^20 + 5//6*x^21 + x^22 + 3//5*x^23 + 3//5*x^24 + 3*x^25 + 10//3*x^26 + 3//8*x^27 + 1//9*x^28 + 1//2*x^29 + 1//5*x^30 + 7//10*x^31 + 2*x^32 + 5//6*x^33 + 1//10*x^34 + 4//9*x^35 + 1//3*x^36 + x^37 + 1//2*x^39 + 1//10*x^40 + 9//4*x^41 + 10//3*x^42 + 3//7*x^44 + 5//8*x^45 + x^47 + 2//5*x^48 + 2*x^49 + O(x^50))*y^15 + (1//2 + 2//3*x^18 + 7//3*x^20 + 3//4*x^21 + 4*x^22 + 9//7*x^23 + 3//4*x^25 + 3//2*x^27 + x^28 + 3//5*x^29 + x^30 + 4//5*x^31 + 7//6*x^32 + 5//7*x^33 + 5*x^36 + 10*x^37 + x^38 + 7//4*x^39 + 5//2*x^40 + 1//2*x^41 + 5//6*x^43 + 9//10*x^44 + 1//3*x^45 + 9//5*x^47 + 5//9*x^48 + 1//2*x^49 + O(x^50))*y^14 + (4//5 + 2//7*x^11 + 3*x^13 + 8//9*x^14 + 5*x^16 + 2//5*x^17 + 4//5*x^20 + 1//3*x^21 + 2//3*x^23 + 5//8*x^24 + 9//4*x^25 + 5//4*x^26 + 5//4*x^27 + 9//4*x^28 + 2//3*x^29 + 1//6*x^30 + 9//8*x^31 + 7//6*x^32 + 7//4*x^33 + 9//4*x^34 + 5//4*x^35 + 5//4*x^36 + 2*x^37 + 5//3*x^38 + 1//3*x^40 + 3*x^41 + 1//8*x^43 + 4*x^44 + 5//7*x^45 + 3//7*x^46 + 3//2*x^47 + 5//4*x^48 + 8*x^49 + O(x^50))*y^13 + (2 + 9//10*x^28 + 7//9*x^30 + 3*x^31 + 8//7*x^32 + x^33 + 1//8*x^34 + 9//4*x^35 + 1//2*x^36 + 8//7*x^37 + 3//7*x^38 + 6//7*x^39 + 1//5*x^40 + 7//4*x^41 + 3//10*x^42 + 1//5*x^43 + 5//3*x^44 + 5//2*x^45 + 7//3*x^46 + 9//7*x^47 + 4*x^48 + x^49 + O(x^50))*y^12 + (1 + 3//2*x^35 + 5//3*x^37 + 1//2*x^38 + 5//4*x^39 + x^40 + 3//8*x^41 + 8//9*x^42 + 5//6*x^43 + 3//5*x^44 + 3*x^45 + 7//10*x^46 + x^47 + 3//10*x^49 + O(x^50))*y^11 + (5//9 + 7//8*x^13 + x^14 + 5//6*x^15 + 4//5*x^17 + 2*x^18 + 5//4*x^19 + 6//7*x^20 + 9//2*x^21 + 5//4*x^22 + 3*x^23 + 7//4*x^24 + 4//7*x^25 + 6//5*x^26 + 5*x^28 + 3//10*x^29 + 2*x^30 + 10//3*x^31 + 2//5*x^32 + 5//6*x^33 + 9*x^34 + 2*x^35 + 5//2*x^36 + 5*x^37 + 7//2*x^38 + 6*x^39 + 5//4*x^42 + 1//5*x^43 + 7//5*x^44 + 3*x^45 + 1//8*x^46 + 2//9*x^47 + 1//4*x^48 + 7//3*x^49 + O(x^50))*y^10 + (1//2 + 3//7*x^20 + 3*x^21 + 4//3*x^22 + 9//2*x^23 + 8//5*x^24 + 4//7*x^26 + 10//3*x^27 + x^28 + x^29 + x^30 + x^31 + 7//8*x^33 + 2*x^34 + 1//2*x^35 + 5//3*x^37 + 4//5*x^38 + 10//7*x^39 + 9//2*x^40 + 6//5*x^41 + 2//7*x^42 + 2*x^43 + 10*x^44 + 4*x^45 + 7//8*x^46 + 5//7*x^47 + 10//7*x^48 + 4//5*x^49 + O(x^50))*y^9 + (1 + x^49 + O(x^50))*y^8 + (5//4 + 2*x^5 + 7//9*x^6 + 7//10*x^7 + 5//4*x^8 + 1//3*x^9 + 4//3*x^10 + 7//10*x^11 + 7//8*x^12 + 1//5*x^13 + 3*x^14 + 7//6*x^15 + 1//7*x^16 + 2//3*x^17 + 5//9*x^18 + 1//2*x^19 + 5//3*x^20 + 1//6*x^21 + 5*x^22 + 6//5*x^23 + x^24 + 2//5*x^25 + 5*x^26 + 7//3*x^27 + 7//8*x^28 + 1//10*x^29 + 1//2*x^30 + 4*x^31 + x^34 + 1//2*x^35 + 5*x^37 + 9//8*x^38 + x^40 + 9//4*x^41 + 3//5*x^42 + 5//4*x^43 + 9//10*x^44 + 2//3*x^45 + 5//7*x^46 + 1//8*x^47 + 1//4*x^49 + O(x^50))*y^7 + (3//2 + 9//5*x^22 + 5//3*x^23 + 5//7*x^24 + 1//5*x^25 + 9//8*x^26 + 4//5*x^27 + x^28 + 7//8*x^30 + 2//9*x^31 + 6*x^32 + 7//3*x^34 + 7//6*x^35 + 10*x^36 + 1//2*x^37 + 4//3*x^38 + x^39 + 1//10*x^41 + x^42 + 1//5*x^43 + 5//2*x^44 + 3*x^45 + 1//3*x^46 + 3//4*x^47 + 2//7*x^48 + 7//6*x^49 + O(x^50))*y^6 + (7//3 + 1//3*x^46 + 9//10*x^47 + 1//3*x^48 + 10//9*x^49 + O(x^50))*y^5 + (7//4 + 8//9*x^22 + 3//10*x^23 + 2*x^24 + 8//9*x^25 + 9//2*x^26 + 7//5*x^27 + 7//6*x^28 + 10*x^29 + 3//10*x^30 + 2//5*x^31 + 4//5*x^32 + 9//5*x^33 + 1//5*x^34 + 5//2*x^35 + 7//8*x^37 + 1//5*x^38 + x^39 + 9*x^40 + 3//5*x^41 + 10//3*x^42 + 5//2*x^43 + 9*x^44 + 7//6*x^45 + 5//4*x^46 + 2*x^47 + O(x^50))*y^4 + (1//5 + 7//8*x^27 + 3//2*x^28 + 10*x^29 + 7//3*x^30 + 10//3*x^31 + 3//7*x^32 + 2*x^33 + 4//5*x^34 + 3*x^35 + 8//7*x^36 + x^37 + 5*x^38 + 3//8*x^39 + 4//3*x^40 + x^41 + x^42 + 1//2*x^43 + 8*x^44 + 5//3*x^46 + 1//10*x^47 + 2*x^48 + 4//5*x^49 + O(x^50))*y^3 + (1 + 9*x^48 + 1//4*x^49 + O(x^50))*y^2 + (2//3 + 8//9*x^28 + 7//3*x^30 + 7//4*x^31 + x^32 + x^33 + 3//10*x^34 + 2*x^35 + 4//9*x^37 + 5//3*x^38 + 1//2*x^39 + 3//4*x^40 + 5*x^41 + 3//4*x^42 + 4//7*x^43 + 5//6*x^44 + x^45 + 4*x^46 + 3//5*x^47 + 5//2*x^48 + 2*x^49 + O(x^50))*y + 7//4 + 3*x^20 + 1//6*x^21 + 8//5*x^22 + 2*x^23 + 2*x^24 + 5//3*x^25 + x^26 + 5//7*x^27 + 1//2*x^28 + 5//9*x^29 + 1//5*x^30 + x^31 + 5*x^32 + 1//2*x^33 + 1//7*x^34 + 9//2*x^35 + 5//9*x^36 + 1//9*x^37 + x^38 + 4//7*x^39 + 1//2*x^40 + x^41 + 1//9*x^42 + 6*x^43 + 5*x^44 + 2*x^45 + x^46 + 9//10*x^47 + 5//9*x^49 + O(x^50)
B = y^10 + (9 + x^31 + 2//5*x^32 + 4//5*x^33 + 3*x^34 + 3//2*x^35 + 5//9*x^36 + 2//9*x^37 + 5*x^38 + 3*x^39 + 2*x^41 + 7*x^42 + 1//8*x^43 + 5*x^44 + 9*x^45 + 4//3*x^46 + 1//2*x^47 + 5//7*x^48 + 1//3*x^49 + O(x^50))*y^9 + (1//9 + 3//8*x^48 + 3*x^49 + O(x^50))*y^6 + (2//3 + 8//3*x^17 + 3//4*x^18 + 1//2*x^19 + 2*x^20 + 3//4*x^21 + 1//3*x^22 + 4//3*x^24 + 3//2*x^26 + 10//7*x^27 + 4*x^28 + x^29 + 4//3*x^31 + 6*x^33 + 7//4*x^34 + 10//3*x^35 + 2*x^36 + x^37 + 9//4*x^38 + 7//8*x^39 + 2*x^40 + 1//5*x^41 + 9//2*x^42 + 5*x^43 + x^44 + 6//7*x^45 + 1//4*x^46 + x^47 + 1//9*x^48 + x^49 + O(x^50))*y^5 + (1//2 + 9//8*x^44 + 3//2*x^46 + 2*x^47 + 2//9*x^48 + O(x^50))*y^4 + (9//2 + x^48 + 8//9*x^49 + O(x^50))*y^3 + (10//3 + 4//5*x^41 + 7*x^42 + 8//3*x^43 + 1//2*x^44 + 9//2*x^45 + 7//2*x^46 + 4*x^47 + 6//5*x^48 + 2//5*x^49 + O(x^50))*y^2 + 1 + 3//4*x^4 + 5//3*x^5 + 3*x^6 + 1//3*x^7 + 1//5*x^8 + 4//5*x^9 + 7//9*x^10 + 1//3*x^11 + 2//7*x^12 + 10//9*x^13 + 2//5*x^14 + 1//9*x^17 + x^18 + 5//2*x^19 + 7//8*x^20 + 5*x^21 + 7//5*x^22 + 6*x^23 + 1//2*x^24 + 4//3*x^25 + 3//7*x^26 + 6//5*x^27 + 2//3*x^28 + 7//9*x^29 + 1//3*x^31 + 9*x^32 + 9//8*x^34 + 2//5*x^35 + 1//2*x^36 + 4//7*x^37 + 2*x^38 + 1//4*x^39 + 7//4*x^40 + 7//10*x^41 + x^43 + 2//3*x^44 + 9//10*x^45 + 7//2*x^46 + 4//9*x^47 + 2*x^48 + 3//7*x^49 + O(x^50)

(Q,R) = fast_div_rem(A,B,l)

A - B*Q - R

AF = to_other_poly(A, RDF, RX, RXY)
BF = to_other_poly(B, RDF, RX, RXY)

(QF,RF) = fast_div_rem(AF, BF, l)

(Qe,Re, r_q, r_r) = val_fast_div_rem(AF, BF, l, rho, tau)


FB = to_ball(AF, l)
GB = to_ball(BF, l)

(H_tilda, r_h) = val_fast_inv(rev(BF, 10), l, 32, rho, tau)


k = 32
BF
rev(BF,10)
H_tilda = fast_inv(rev(BF, 10), l, k)
H_tildaB = to_ball(H_tilda, l)
GB = to_ball(rev(BF,10), l)

delta = biv_norm(H_tildaB - biv_mullow(GB, H_tildaB^2, l, k), rho, tau)
lambda = biv_norm(to_ball(RXY(1), l) - biv_mullow(GB, H_tildaB, l, k), rho, tau)

if min_interval(lambda) > 1
    error("lambda is greater than 1: "*string(lambda))
end

if is_negative(delta)
    error("delta is not positive: "*string(delta))
end
    
r = delta/(1-lambda)



# Returns a random Hensel setup with polynomials g and h of random degree <= m in y and <= l in x.
function random_hensel_setup(m::Int, l::Int)
    QX, _ = power_series_ring(AbstractAlgebra.QQ, l, "x"; model=:capped_absolute)
    QXY, _ = polynomial_ring(QX,"y")

    F = 0
    g = 0
    h = 0
    s = 0
    t = 0

    while true
        gi = random_polynomial(AbstractAlgebra.QQ, QX, QXY, m, l)
        hi = random_polynomial(AbstractAlgebra.QQ, QX, QXY, m, l; monic=true)
        F = gi*hi
    
        g = biv_truncate(gi, 1)
        h = biv_truncate(hi, 1)
        s,t = cofactors(g, h, AbstractAlgebra.QQ, QX, QXY)

        check1 = s*g + t*h == 1
        check2 = biv_truncate(F - g*h, 1) == 0

        if check1 && check2 
            break
        end

    end

    return (F,g,h,s,t)
end


(Fe,ge,he,se,te) = random_hensel_setup(10, 10)
rho = 0.5
tau = 1.0

F = to_other_poly(Fe, RDF, RX, RXY)
g = to_other_poly(ge, RDF, RX, RXY)
h = to_other_poly(he, RDF, RX, RXY)
s = to_other_poly(se, RDF, RX, RXY)
t = to_other_poly(te, RDF, RX, RXY)

val_hensel_lifting(F,g,h,s,t,l,rho,tau)


K = parent(F)
    k = parent(F(0))
    n = h.length -1
    m = F.length - n -1

    (G, H, S, T) = hensel_lifting(F, g, h, s, t, l)

    FB = to_ball(F, l)
    GB = to_ball(G, l)
    HB = to_ball(H, l)
    SB = to_ball(S, l)
    TB = to_ball(T, l) 
    norm_G = biv_norm(GB, rho, tau)
    norm_H = biv_norm(HB, rho, tau)
    norm_S = biv_norm(SB, rho, tau)
    norm_T = biv_norm(TB, rho, tau)
    

    EB = biv_truncate(FB, l) - biv_mullow(GB, HB, l)

    (QB, RB, r_Q, r_R) = val_fast_div_rem_interval(biv_mullow(SB, EB, l, m+n), HB, l, rho, tau)
    delta_G = mag(biv_norm(biv_truncate(TB*EB + QB*GB, l, m + 1), rho, tau)) + norm_G*r_Q
    delta_H = mag(biv_norm(RB, rho, tau)) + r_R
    
    delta = max(delta_G, delta_H)


    # Lipschitz ratio bounding
    Y_poly = K(0)
    set_coefficient!(Y_poly, m + 2*n - 2, k(1))

    (PHIB, _, r_PHI, _) = val_fast_div_rem_interval(to_ball(Y_poly, l), HB, l, rho, tau)
    
    PSIB = SB*GB + TB*HB - to_ball(K(1), l)
    
    mu = max(norm_G, norm_H)
    nu = max(norm_T, norm_S)
    phi = biv_norm(PHIB, rho, tau) + r_PHI
    psi = biv_norm(PSIB, rho, tau)

    # Compute the polynomials' roots
    a = 2*nu*(1+mu*phi)
    b = psi*(1 + mu*phi) - 1
    c = delta
    disc = b*b - 4*a*c


    if !is_positive(disc)
        error("Could not validate bounds (polynomial has no real roots)")
    end

    r_min = (-b - sqrt(disc))/(2*a)
    r_max = (-b + sqrt(disc))/(2*a)

    r = r_min
    if !is_positive(r_min)
        if !is_positive(r_max)
            error("Could not validate bounds (polynomial has no positive roots)")
        end
        r = r_max
    end
    